import keras_preprocessing
import keras
print(keras.version)
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np
import cv2
from PIL import Image
from keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense,Flatten
from tensorflow.keras.layers import Activation, Dropout
from keras.optimizers import Adam

url= r'C:\Users\ADMIN\OneDrive\Documents\hehe\AI\train'
#-------------------------------------
img_size=1024
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, validation_split=0.2)
test_datagen = ImageDataGenerator(rescale=1./255,validation_split=0.2)
train_datagen=train_datagen.flow_from_directory(url,target_size=(32,32),subset='training')
test_datagen=test_datagen.flow_from_directory(url,target_size=(32,32),subset='validation')
#-------------------------------------------------------------------------------------------
model=Sequential()
#Bộ 1 Convolution
model.add(Conv2D(filters=64, kernel_size=(5,5),padding='same',activation='relu',input_shape=(32,32,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

#Bộ 2 Convolution
model.add(Conv2D(filters=64, kernel_size=(3,3),padding='same',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))

#Bộ 3 Convolution
model.add(Conv2D(filters=64, kernel_size=(3,3),padding='same',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))

model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()
from keras.utils import plot_model

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
model.compile(optimizer=Adam(),loss='categorical_crossentropy',metrics=['accuracy'])
model.fit(train_datagen,epochs=300,validation_data=(test_datagen),verbose=2)
#----------------------------------------------------------------------------
train_datagen.class_indices
print('Class indices:', train_datagen.class_indices)

model.save('trained_model.h5')
